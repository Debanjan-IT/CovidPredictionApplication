# -*- coding: utf-8 -*-
"""CovidPredictionModelSelection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fDFnFF0i_96fj9dy3_YiDyEn0AI1DxLw

# **Choosing directory**
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd sample_data/

"""# **Importing module**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import metrics
import time
import joblib
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn import svm
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB

"""# **Required variables**"""

model_score = []

"""# **Importing data**"""

cleaned_data = pd.read_csv("Covid Dataset.csv")

#cleaned_data.info()

"""# **Processing data**"""

processed_data = []
for i in range(len(cleaned_data.index)):
  a = []
  for j in cleaned_data.iloc[i,:]:
    if (j.lower() == "yes"):
      a.append(1)
    else:
      a.append(0)
  processed_data.append(a)

df = pd.DataFrame(processed_data, columns =['Breathing Problem', 'Fever', 'Dry Cough', 'Sore throat', 'Running Nose', 'Asthma', 'Chronic Lung Disease', 'Headache', 'Heart Disease', 'Diabetes', 'Hyper Tension', 'Fatigue', 'Gastrointestinal', 'Abroad travel', 'Contact with COVID Patient', 'Attended Large Gathering', 'Visited Public Exposed Places', 'Family working in Public Exposed Places', 'Wearing Masks', 'Sanitization from Market', 'COVID-19'])

df.to_csv('Cleaned&ProcessedData.csv')

"""# **Cleaning data**"""

processed_dataframe = pd.DataFrame(processed_data)
cleaned_data = processed_dataframe.dropna()
#print(f"Deleted Rows: {(len(processed_dataframe.index) - len(cleaned_data.index))}")

"""# **Splitting data**"""

X = cleaned_data.iloc[:,0:20].values
y = cleaned_data.iloc[:,20]

"""# **Train test splitting**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

"""# **MODEL 1 (RFC)** """

model1 = RandomForestClassifier(n_estimators=100)
strt = time.time()
model1.fit(X_train,y_train)
end = time.time()
y_pred1 = model1.predict(X_test)

model_score.append(["RFC",metrics.accuracy_score(y_test, y_pred1)*100,end-strt])
print("Accuracy:",metrics.accuracy_score(y_test, y_pred1)*100)

"""# **MODEL 2 (DTC)**"""

model2 = DecisionTreeClassifier()
strt = time.time()
model2.fit(X_train,y_train)
end = time.time()
y_pred2 = model2.predict(X_test)

model_score.append(["DTC",metrics.accuracy_score(y_test, y_pred2)*100,end-strt])
print("Accuracy:",metrics.accuracy_score(y_test, y_pred2)*100)

"""# **MODEL 3 (SVM)**"""

model3 = svm.SVC(kernel='linear')
strt = time.time()
model3.fit(X_train,y_train)
end = time.time()
y_pred3 = model3.predict(X_test)

model_score.append(["SVM",metrics.accuracy_score(y_test, y_pred3)*100,end-strt])
print("Accuracy:",metrics.accuracy_score(y_test, y_pred3)*100)

"""# **MODEL 4 (LR)**"""

model4 = LogisticRegression()
strt = time.time()
model4.fit(X_train,y_train)
end = time.time()
y_pred4 = model4.predict(X_test)

model_score.append(["LR",metrics.accuracy_score(y_test, y_pred4)*100,end-strt])
print("Accuracy:",metrics.accuracy_score(y_test, y_pred4)*100)

"""# **MODEL 5 (KNN)**"""

model5 = KNeighborsClassifier()
strt = time.time()
model5.fit(X_train,y_train)
end = time.time()
y_pred5 = model5.predict(X_test)

model_score.append(["KNN",metrics.accuracy_score(y_test, y_pred5)*100,end-strt])
print("Accuracy:",metrics.accuracy_score(y_test, y_pred5)*100)

"""# **MODEL 6 (NB)**"""

model6 = GaussianNB()
strt = time.time()
model6.fit(X_train,y_train)
end = time.time()
y_pred6 = model6.predict(X_test)

model_score.append(["NB",metrics.accuracy_score(y_test, y_pred6)*100,end-strt])
print("Accuracy:",metrics.accuracy_score(y_test, y_pred6)*100)

"""# **Choosing the best machine learning model**"""

mdl = ""
accr = 0
tm = 0
max = 0
for i in model_score:
  if (i[1] > max):
    mdl = i[0]
    max = i[1]
    accr = i[1]
    tm = i[2]
  elif (i[1] == max and tm > i[2]):
    mdl = i[0]
    max = i[1]
    accr = i[1]
    tm = i[2]
print(f"Best model is {mdl} with {accr}% accuracy and time consumption {tm}")

"""# **Making and training the best model**"""

model = DecisionTreeClassifier()
model.fit(X,y)

"""# **Saving the trained model**"""

filename = 'BestModel.sav'
joblib.dump(model, filename)

"""# **Loading the saved model**"""

#model = joblib.load(filename)

"""# **Predicting with the saved model**"""

#res = model.predict([[1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,1,0,1,1]])[0]
#if (res == 0):
 # print("Negative")
#else:
  #print("Positive")